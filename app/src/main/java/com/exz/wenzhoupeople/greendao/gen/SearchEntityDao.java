package com.exz.wenzhoupeople.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.exz.wenzhoupeople.entity.SearchEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEARCH_ENTITY".
*/
public class SearchEntityDao extends AbstractDao<SearchEntity, java.util.Date> {

    public static final String TABLENAME = "SEARCH_ENTITY";

    /**
     * Properties of entity SearchEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SearchContent = new Property(0, String.class, "searchContent", false, "SEARCH_CONTENT");
        public final static Property Date = new Property(1, java.util.Date.class, "date", true, "DATE");
    }


    public SearchEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SearchEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEARCH_ENTITY\" (" + //
                "\"SEARCH_CONTENT\" TEXT," + // 0: searchContent
                "\"DATE\" INTEGER PRIMARY KEY );"); // 1: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEARCH_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SearchEntity entity) {
        stmt.clearBindings();
 
        String searchContent = entity.getSearchContent();
        if (searchContent != null) {
            stmt.bindString(1, searchContent);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SearchEntity entity) {
        stmt.clearBindings();
 
        String searchContent = entity.getSearchContent();
        if (searchContent != null) {
            stmt.bindString(1, searchContent);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
    }

    @Override
    public java.util.Date readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1));
    }    

    @Override
    public SearchEntity readEntity(Cursor cursor, int offset) {
        SearchEntity entity = new SearchEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // searchContent
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SearchEntity entity, int offset) {
        entity.setSearchContent(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
     }
    
    @Override
    protected final java.util.Date updateKeyAfterInsert(SearchEntity entity, long rowId) {
        return entity.getDate();
    }
    
    @Override
    public java.util.Date getKey(SearchEntity entity) {
        if(entity != null) {
            return entity.getDate();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SearchEntity entity) {
        return entity.getDate() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
